import{_ as t,c as o,a2 as d,o as a}from"./chunks/framework.DE7eXg1i.js";const m=JSON.parse('{"title":"Type Alias: EventMessage","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/EventMessage.md","filePath":"reference/api/v1.47/type-aliases/EventMessage.md"}'),c={name:"reference/api/v1.47/type-aliases/EventMessage.md"};function r(n,e,s,i,p,u){return a(),o("div",null,e[0]||(e[0]=[d('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / EventMessage</p><h1 id="type-alias-eventmessage" tabindex="-1">Type Alias: EventMessage <a class="header-anchor" href="#type-alias-eventmessage" aria-label="Permalink to &quot;Type Alias: EventMessage&quot;">​</a></h1><blockquote><p><strong>EventMessage</strong>: <code>object</code></p></blockquote><p>EventMessage represents the information an event contains.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Action</code>?</td><td><code>string</code></td><td>The type of event</td></tr><tr><td><code>Actor</code>?</td><td><a href="./EventActor.html"><code>EventActor</code></a></td><td>-</td></tr><tr><td><code>scope</code>?</td><td><code>&quot;local&quot;</code> | <code>&quot;swarm&quot;</code></td><td>Scope of the event. Engine events are <code>local</code> scope. Cluster (Swarm) events are <code>swarm</code> scope.</td></tr><tr><td><code>time</code>?</td><td><code>number</code></td><td>Timestamp of event</td></tr><tr><td><code>timeNano</code>?</td><td><code>number</code></td><td>Timestamp of event, with nanosecond accuracy</td></tr><tr><td><code>Type</code>?</td><td><code>&quot;builder&quot;</code> | <code>&quot;config&quot;</code> | <code>&quot;container&quot;</code> | <code>&quot;daemon&quot;</code> | <code>&quot;image&quot;</code> | <code>&quot;network&quot;</code> | <code>&quot;node&quot;</code> | <code>&quot;plugin&quot;</code> | <code>&quot;secret&quot;</code> | <code>&quot;service&quot;</code> | <code>&quot;volume&quot;</code></td><td>The type of object emitting the event</td></tr></tbody></table>',6)]))}const q=t(c,[["render",r]]);export{m as __pageData,q as default};
