import{_ as t,c as d,a2 as o,o as r}from"./chunks/framework.DE7eXg1i.js";const u=JSON.parse('{"title":"Type Alias: SwarmSpec","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/SwarmSpec.md","filePath":"reference/api/v1.47/type-aliases/SwarmSpec.md"}'),a={name:"reference/api/v1.47/type-aliases/SwarmSpec.md"};function c(s,e,n,i,l,p){return r(),d("div",null,e[0]||(e[0]=[o('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / SwarmSpec</p><h1 id="type-alias-swarmspec" tabindex="-1">Type Alias: SwarmSpec <a class="header-anchor" href="#type-alias-swarmspec" aria-label="Permalink to &quot;Type Alias: SwarmSpec&quot;">​</a></h1><blockquote><p><strong>SwarmSpec</strong>: <code>object</code></p></blockquote><p>User modifiable swarm configuration.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>CAConfig</code>?</td><td><code>object</code> | <code>null</code></td><td>CA configuration.</td></tr><tr><td><code>Dispatcher</code>?</td><td><code>object</code> | <code>null</code></td><td>Dispatcher configuration.</td></tr><tr><td><code>EncryptionConfig</code>?</td><td><code>object</code></td><td>Parameters related to encryption-at-rest.</td></tr><tr><td><code>EncryptionConfig.AutoLockManagers</code>?</td><td><code>boolean</code></td><td>If set, generate a key and use it to lock data stored on the managers.</td></tr><tr><td><code>Labels</code>?</td><td><code>object</code></td><td>User-defined key/value metadata.</td></tr><tr><td><code>Name</code>?</td><td><code>string</code></td><td>Name of the swarm.</td></tr><tr><td><code>Orchestration</code>?</td><td><code>object</code> | <code>null</code></td><td>Orchestration configuration.</td></tr><tr><td><code>Raft</code>?</td><td><code>object</code></td><td>Raft configuration.</td></tr><tr><td><code>Raft.ElectionTick</code>?</td><td><code>number</code></td><td>The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. <code>ElectionTick</code> must be greater than <code>HeartbeatTick</code>. A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.</td></tr><tr><td><code>Raft.HeartbeatTick</code>?</td><td><code>number</code></td><td>The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers. A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.</td></tr><tr><td><code>Raft.KeepOldSnapshots</code>?</td><td><code>number</code></td><td>The number of snapshots to keep beyond the current snapshot.</td></tr><tr><td><code>Raft.LogEntriesForSlowFollowers</code>?</td><td><code>number</code></td><td>The number of log entries to keep around to sync up slow followers after a snapshot is created.</td></tr><tr><td><code>Raft.SnapshotInterval</code>?</td><td><code>number</code></td><td>The number of log entries between snapshots.</td></tr><tr><td><code>TaskDefaults</code>?</td><td><code>object</code></td><td>Defaults for creating tasks in this cluster.</td></tr><tr><td><code>TaskDefaults.LogDriver</code>?</td><td><code>object</code></td><td>The log driver to use for tasks created in the orchestrator if unspecified by a service. Updating this value only affects new tasks. Existing tasks continue to use their previously configured log driver until recreated.</td></tr><tr><td><code>TaskDefaults.LogDriver.Name</code>?</td><td><code>string</code></td><td>The log driver to use as a default for new tasks.</td></tr><tr><td><code>TaskDefaults.LogDriver.Options</code>?</td><td><code>object</code></td><td>Driver-specific options for the selected log driver, specified as key/value pairs.</td></tr></tbody></table>',6)]))}const h=t(a,[["render",c]]);export{u as __pageData,h as default};
