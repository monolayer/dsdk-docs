import{_ as t,c as a,a2 as o,o as d}from"./chunks/framework.DE7eXg1i.js";const p=JSON.parse('{"title":"Type Alias: ImagePushData","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/ImagePushData.md","filePath":"reference/api/v1.47/type-aliases/ImagePushData.md"}'),r={name:"reference/api/v1.47/type-aliases/ImagePushData.md"};function i(s,e,c,h,l,n){return d(),a("div",null,e[0]||(e[0]=[o('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / ImagePushData</p><h1 id="type-alias-imagepushdata" tabindex="-1">Type Alias: ImagePushData <a class="header-anchor" href="#type-alias-imagepushdata" aria-label="Permalink to &quot;Type Alias: ImagePushData&quot;">​</a></h1><blockquote><p><strong>ImagePushData</strong>: <code>object</code></p></blockquote><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>headers</code></td><td><code>object</code></td><td>-</td></tr><tr><td><code>headers.X-Registry-Auth</code></td><td><code>string</code></td><td>A base64url-encoded auth configuration. Refer to the <a href="#sectionauthentication">authentication section</a> for details.</td></tr><tr><td><code>path</code></td><td><code>object</code></td><td>-</td></tr><tr><td><code>path.name</code></td><td><code>string</code></td><td>Name of the image to push. For example, <code>registry.example.com/myimage</code>. The image must be present in the local image store with the same name. The name should be provided without tag; if a tag is provided, it is ignored. For example, <code>registry.example.com/myimage:latest</code> is considered equivalent to <code>registry.example.com/myimage</code>. Use the <code>tag</code> parameter to specify the tag to push.</td></tr><tr><td><code>query</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>query.platform</code>?</td><td><code>string</code></td><td>JSON-encoded OCI platform to select the platform-variant to push. If not provided, all available variants will attempt to be pushed. If the daemon provides a multi-platform image store, this selects the platform-variant to push to the registry. If the image is a single-platform image, or if the multi-platform image does not provide a variant matching the given platform, an error is returned. Example: <code>{&quot;os&quot;: &quot;linux&quot;, &quot;architecture&quot;: &quot;arm&quot;, &quot;variant&quot;: &quot;v5&quot;}</code></td></tr><tr><td><code>query.tag</code>?</td><td><code>string</code></td><td>Tag of the image to push. For example, <code>latest</code>. If no tag is provided, all tags of the given image that are present in the local image store are pushed.</td></tr></tbody></table>',5)]))}const u=t(r,[["render",i]]);export{p as __pageData,u as default};
