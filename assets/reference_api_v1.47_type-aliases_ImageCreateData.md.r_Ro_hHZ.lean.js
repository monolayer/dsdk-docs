import{_ as t,c as a,a2 as o,o as d}from"./chunks/framework.DE7eXg1i.js";const p=JSON.parse('{"title":"Type Alias: ImageCreateData","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/ImageCreateData.md","filePath":"reference/api/v1.47/type-aliases/ImageCreateData.md"}'),r={name:"reference/api/v1.47/type-aliases/ImageCreateData.md"};function i(c,e,n,s,h,m){return d(),a("div",null,e[0]||(e[0]=[o('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / ImageCreateData</p><h1 id="type-alias-imagecreatedata" tabindex="-1">Type Alias: ImageCreateData <a class="header-anchor" href="#type-alias-imagecreatedata" aria-label="Permalink to &quot;Type Alias: ImageCreateData&quot;">​</a></h1><blockquote><p><strong>ImageCreateData</strong>: <code>object</code></p></blockquote><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>body</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>body.inputImage</code>?</td><td><code>Buffer</code> | <code>string</code></td><td>Image content if the value <code>-</code> has been specified in fromSrc query parameter</td></tr><tr><td><code>headers</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>headers.X-Registry-Auth</code>?</td><td><code>string</code></td><td>A base64url-encoded auth configuration. Refer to the <a href="#sectionauthentication">authentication section</a> for details.</td></tr><tr><td><code>query</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>query.changes</code>?</td><td><code>string</code>[]</td><td>Apply <code>Dockerfile</code> instructions to the image that is created, for example: <code>changes=ENV DEBUG=true</code>. Note that <code>ENV DEBUG=true</code> should be URI component encoded. Supported <code>Dockerfile</code> instructions: <code>CMD</code></td></tr><tr><td><code>query.fromImage</code>?</td><td><code>string</code></td><td>Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.</td></tr><tr><td><code>query.fromSrc</code>?</td><td><code>string</code></td><td>Source to import. The value may be a URL from which the image can be retrieved or <code>-</code> to read the image from the request body. This parameter may only be used when importing an image.</td></tr><tr><td><code>query.message</code>?</td><td><code>string</code></td><td>Set commit message for imported image.</td></tr><tr><td><code>query.platform</code>?</td><td><code>string</code></td><td>Platform in the format os[/arch[/variant]]. When used in combination with the <code>fromImage</code> option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced. When used with the <code>fromSrc</code> option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image.</td></tr><tr><td><code>query.repo</code>?</td><td><code>string</code></td><td>Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.</td></tr><tr><td><code>query.tag</code>?</td><td><code>string</code></td><td>Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.</td></tr></tbody></table>',5)]))}const g=t(r,[["render",i]]);export{p as __pageData,g as default};
