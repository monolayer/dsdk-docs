import{_ as t,c as a,a2 as o,o as r}from"./chunks/framework.DE7eXg1i.js";const m=JSON.parse('{"title":"Type Alias: ContainerCreateData","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/ContainerCreateData.md","filePath":"reference/api/v1.47/type-aliases/ContainerCreateData.md"}'),d={name:"reference/api/v1.47/type-aliases/ContainerCreateData.md"};function i(n,e,c,s,h,l){return r(),a("div",null,e[0]||(e[0]=[o('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / ContainerCreateData</p><h1 id="type-alias-containercreatedata" tabindex="-1">Type Alias: ContainerCreateData <a class="header-anchor" href="#type-alias-containercreatedata" aria-label="Permalink to &quot;Type Alias: ContainerCreateData&quot;">​</a></h1><blockquote><p><strong>ContainerCreateData</strong>: <code>object</code></p></blockquote><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>body</code></td><td><a href="./ContainerConfig.html"><code>ContainerConfig</code></a> &amp; <code>object</code></td><td>Container to create</td></tr><tr><td><code>query</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>query.name</code>?</td><td><code>string</code></td><td>Assign the specified name to the container. Must match <code>/?[a-zA-Z0-9][a-zA-Z0-9_.-]+</code>.</td></tr><tr><td><code>query.platform</code>?</td><td><code>string</code></td><td>Platform in the format <code>os[/arch[/variant]]</code> used for image lookup. When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a <code>404</code> status. If the option is not set, the host&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the <code>Warnings</code> field in the response, for example; WARNING: The requested image&#39;s platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested</td></tr></tbody></table>',5)]))}const f=t(d,[["render",i]]);export{m as __pageData,f as default};
