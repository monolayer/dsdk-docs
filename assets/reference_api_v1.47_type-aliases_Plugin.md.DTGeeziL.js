import{_ as d,c as e,a2 as o,o as c}from"./chunks/framework.DE7eXg1i.js";const u=JSON.parse('{"title":"Type Alias: Plugin","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/Plugin.md","filePath":"reference/api/v1.47/type-aliases/Plugin.md"}'),r={name:"reference/api/v1.47/type-aliases/Plugin.md"};function n(i,t,a,g,s,l){return c(),e("div",null,t[0]||(t[0]=[o('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / Plugin</p><h1 id="type-alias-plugin" tabindex="-1">Type Alias: Plugin <a class="header-anchor" href="#type-alias-plugin" aria-label="Permalink to &quot;Type Alias: Plugin&quot;">​</a></h1><blockquote><p><strong>Plugin</strong>: <code>object</code></p></blockquote><p>A plugin for the Engine API</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Config</code></td><td><code>object</code></td><td>The config of a plugin.</td></tr><tr><td><code>Config.Args</code></td><td><code>object</code></td><td>-</td></tr><tr><td><code>Config.Args.Description</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.Args.Name</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.Args.Settable</code></td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>Config.Args.Value</code></td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>Config.Description</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.DockerVersion</code>?</td><td><code>string</code></td><td>Docker Version used to create the plugin</td></tr><tr><td><code>Config.Documentation</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.Entrypoint</code></td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>Config.Env</code></td><td><a href="./PluginEnv.html"><code>PluginEnv</code></a>[]</td><td>-</td></tr><tr><td><code>Config.Interface</code></td><td><code>object</code></td><td>The interface between Docker and the plugin</td></tr><tr><td><code>Config.Interface.ProtocolScheme</code>?</td><td><code>&quot;&quot;</code> | <code>&quot;moby.plugins.http/v1&quot;</code></td><td>Protocol to use for clients connecting to the plugin.</td></tr><tr><td><code>Config.Interface.Socket</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.Interface.Types</code></td><td><a href="./PluginInterfaceType.html"><code>PluginInterfaceType</code></a>[]</td><td>-</td></tr><tr><td><code>Config.IpcHost</code></td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>Config.Linux</code></td><td><code>object</code></td><td>-</td></tr><tr><td><code>Config.Linux.AllowAllDevices</code></td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>Config.Linux.Capabilities</code></td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>Config.Linux.Devices</code></td><td><a href="./PluginDevice.html"><code>PluginDevice</code></a>[]</td><td>-</td></tr><tr><td><code>Config.Mounts</code></td><td><a href="./PluginMount.html"><code>PluginMount</code></a>[]</td><td>-</td></tr><tr><td><code>Config.Network</code></td><td><code>object</code></td><td>-</td></tr><tr><td><code>Config.Network.Type</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.PidHost</code></td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>Config.PropagatedMount</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.rootfs</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>Config.rootfs.diff_ids</code>?</td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>Config.rootfs.type</code>?</td><td><code>string</code></td><td>-</td></tr><tr><td><code>Config.User</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>Config.User.GID</code>?</td><td><code>number</code></td><td>-</td></tr><tr><td><code>Config.User.UID</code>?</td><td><code>number</code></td><td>-</td></tr><tr><td><code>Config.WorkDir</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>Enabled</code></td><td><code>boolean</code></td><td>True if the plugin is running. False if the plugin is not running, only installed.</td></tr><tr><td><code>Id</code>?</td><td><code>string</code></td><td>-</td></tr><tr><td><code>Name</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>PluginReference</code>?</td><td><code>string</code></td><td>plugin remote reference used to push/pull the plugin</td></tr><tr><td><code>Settings</code></td><td><code>object</code></td><td>Settings that can be modified by users.</td></tr><tr><td><code>Settings.Args</code></td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>Settings.Devices</code></td><td><a href="./PluginDevice.html"><code>PluginDevice</code></a>[]</td><td>-</td></tr><tr><td><code>Settings.Env</code></td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>Settings.Mounts</code></td><td><a href="./PluginMount.html"><code>PluginMount</code></a>[]</td><td>-</td></tr></tbody></table>',6)]))}const p=d(r,[["render",n]]);export{u as __pageData,p as default};
