import{_ as e,c as d,a2 as o,o as n}from"./chunks/framework.DE7eXg1i.js";const f=JSON.parse('{"title":"Type Alias: EndpointSettings","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/EndpointSettings.md","filePath":"reference/api/v1.47/type-aliases/EndpointSettings.md"}'),a={name:"reference/api/v1.47/type-aliases/EndpointSettings.md"};function r(i,t,s,c,l,p){return n(),d("div",null,t[0]||(t[0]=[o('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / EndpointSettings</p><h1 id="type-alias-endpointsettings" tabindex="-1">Type Alias: EndpointSettings <a class="header-anchor" href="#type-alias-endpointsettings" aria-label="Permalink to &quot;Type Alias: EndpointSettings&quot;">​</a></h1><blockquote><p><strong>EndpointSettings</strong>: <code>object</code></p></blockquote><p>Configuration for a network endpoint.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Aliases</code>?</td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>DNSNames</code>?</td><td><code>string</code>[]</td><td>List of all DNS names an endpoint has on a specific network. This list is based on the container name, network aliases, container short ID, and hostname. These DNS names are non-fully qualified but can contain several dots. You can get fully qualified DNS names by appending <code>.&lt;network-name&gt;</code>. For instance, if container name is <code>my.ctr</code> and the network is named <code>testnet</code>, <code>DNSNames</code> will contain <code>my.ctr</code> and the FQDN will be <code>my.ctr.testnet</code>.</td></tr><tr><td><code>DriverOpts</code>?</td><td><code>object</code> | <code>null</code></td><td>DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific.</td></tr><tr><td><code>EndpointID</code>?</td><td><code>string</code></td><td>Unique ID for the service endpoint in a Sandbox.</td></tr><tr><td><code>Gateway</code>?</td><td><code>string</code></td><td>Gateway address for this network.</td></tr><tr><td><code>GlobalIPv6Address</code>?</td><td><code>string</code></td><td>Global IPv6 address.</td></tr><tr><td><code>GlobalIPv6PrefixLen</code>?</td><td><code>number</code></td><td>Mask length of the global IPv6 address.</td></tr><tr><td><code>IPAddress</code>?</td><td><code>string</code></td><td>IPv4 address.</td></tr><tr><td><code>IPAMConfig</code>?</td><td><a href="./EndpointIPAMConfig.html"><code>EndpointIPAMConfig</code></a></td><td>-</td></tr><tr><td><code>IPPrefixLen</code>?</td><td><code>number</code></td><td>Mask length of the IPv4 address.</td></tr><tr><td><code>IPv6Gateway</code>?</td><td><code>string</code></td><td>IPv6 gateway address.</td></tr><tr><td><code>Links</code>?</td><td><code>string</code>[]</td><td>-</td></tr><tr><td><code>MacAddress</code>?</td><td><code>string</code></td><td>MAC address for the endpoint on this network. The network driver might ignore this parameter.</td></tr><tr><td><code>NetworkID</code>?</td><td><code>string</code></td><td>Unique ID of the network.</td></tr></tbody></table>',6)]))}const g=e(a,[["render",r]]);export{f as __pageData,g as default};
