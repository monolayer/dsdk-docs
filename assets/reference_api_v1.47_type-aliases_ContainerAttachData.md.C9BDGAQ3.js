import{_ as e,c as a,a2 as d,o}from"./chunks/framework.DE7eXg1i.js";const u=JSON.parse('{"title":"Type Alias: ContainerAttachData","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/ContainerAttachData.md","filePath":"reference/api/v1.47/type-aliases/ContainerAttachData.md"}'),c={name:"reference/api/v1.47/type-aliases/ContainerAttachData.md"};function r(n,t,i,s,l,h){return o(),a("div",null,t[0]||(t[0]=[d('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / ContainerAttachData</p><h1 id="type-alias-containerattachdata" tabindex="-1">Type Alias: ContainerAttachData <a class="header-anchor" href="#type-alias-containerattachdata" aria-label="Permalink to &quot;Type Alias: ContainerAttachData&quot;">​</a></h1><blockquote><p><strong>ContainerAttachData</strong>: <code>object</code></p></blockquote><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>path</code></td><td><code>object</code></td><td>-</td></tr><tr><td><code>path.id</code></td><td><code>string</code></td><td>ID or name of the container</td></tr><tr><td><code>query</code>?</td><td><code>object</code></td><td>-</td></tr><tr><td><code>query.detachKeys</code>?</td><td><code>string</code></td><td>Override the key sequence for detaching a container.Format is a single character <code>[a-Z]</code> or <code>ctrl-&lt;value&gt;</code> where <code>&lt;value&gt;</code> is one of: <code>a-z</code>, <code>@</code>, <code>^</code>, <code>[</code>, <code>,</code> or <code>_</code>.</td></tr><tr><td><code>query.logs</code>?</td><td><code>boolean</code></td><td>Replay previous logs from the container. This is useful for attaching to a container that has started and you want to output everything since the container started. If <code>stream</code> is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.</td></tr><tr><td><code>query.stderr</code>?</td><td><code>boolean</code></td><td>Attach to <code>stderr</code></td></tr><tr><td><code>query.stdin</code>?</td><td><code>boolean</code></td><td>Attach to <code>stdin</code></td></tr><tr><td><code>query.stdout</code>?</td><td><code>boolean</code></td><td>Attach to <code>stdout</code></td></tr><tr><td><code>query.stream</code>?</td><td><code>boolean</code></td><td>Stream attached streams from the time the request was made onwards.</td></tr></tbody></table>',5)]))}const y=e(c,[["render",r]]);export{u as __pageData,y as default};
