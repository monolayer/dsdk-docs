import{_ as t,c as a,a2 as d,o}from"./chunks/framework.DE7eXg1i.js";const u=JSON.parse('{"title":"Type Alias: ImageManifestSummary","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/v1.47/type-aliases/ImageManifestSummary.md","filePath":"reference/api/v1.47/type-aliases/ImageManifestSummary.md"}'),i={name:"reference/api/v1.47/type-aliases/ImageManifestSummary.md"};function n(s,e,r,c,l,m){return o(),a("div",null,e[0]||(e[0]=[d('<p><a href="./../../modules.html">dsdk</a> / <a href="./../">v1.47</a> / ImageManifestSummary</p><h1 id="type-alias-imagemanifestsummary" tabindex="-1">Type Alias: ImageManifestSummary <a class="header-anchor" href="#type-alias-imagemanifestsummary" aria-label="Permalink to &quot;Type Alias: ImageManifestSummary&quot;">​</a></h1><blockquote><p><strong>ImageManifestSummary</strong>: <code>object</code></p></blockquote><p>ImageManifestSummary represents a summary of an image manifest.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>AttestationData</code>?</td><td><code>object</code> | <code>null</code></td><td>The image data for the attestation manifest. This field is only populated when Kind is &quot;attestation&quot;.</td></tr><tr><td><code>Available</code></td><td><code>boolean</code></td><td>Indicates whether all the child content (image config, layers) is fully available locally.</td></tr><tr><td><code>Descriptor</code></td><td><a href="./OCIDescriptor.html"><code>OCIDescriptor</code></a></td><td>-</td></tr><tr><td><code>ID</code></td><td><code>string</code></td><td>ID is the content-addressable ID of an image and is the same as the digest of the image manifest.</td></tr><tr><td><code>ImageData</code>?</td><td><code>object</code> | <code>null</code></td><td>The image data for the image manifest. This field is only populated when Kind is &quot;image&quot;.</td></tr><tr><td><code>Kind</code></td><td><code>&quot;image&quot;</code> | <code>&quot;attestation&quot;</code> | <code>&quot;unknown&quot;</code></td><td>The kind of the manifest. kind</td></tr><tr><td><code>Size</code></td><td><code>object</code></td><td>-</td></tr><tr><td><code>Size.Content</code></td><td><code>number</code></td><td>Content is the size (in bytes) of all the locally present content in the content store (e.g. image config, layers) referenced by this manifest and its children. This only includes blobs in the content store.</td></tr><tr><td><code>Size.Total</code></td><td><code>number</code></td><td>Total is the total size (in bytes) of all the locally present data (both distributable and non-distributable) that&#39;s related to this manifest and its children. This equal to the sum of [Content] size AND all the sizes in the [Size] struct present in the Kind-specific data struct. For example, for an image kind (Kind == &quot;image&quot;) this would include the size of the image content and unpacked image snapshots ([Size.Content] + [ImageData.Size.Unpacked]).</td></tr></tbody></table>',6)]))}const f=t(i,[["render",n]]);export{u as __pageData,f as default};
